This is a document designed to do two things: 
  1) Serve as a schedule/roadmap of sorts for the app.
  2) Handle day-to-day documentation and tasks accomplished, keeping track of what was done and when it was done.
  
Objectives:
"(1) each day has its own page
(2) each state listed seperately
(3) broken down by city
(4) listing all venues-per-city
(5) bands-per-city
(6) promoters/bookers-per-city
(7) it becomes a consolidated reference guide
(8) with data from the DB's
(9) the new viral data
(10) and essentially one just needs to glance the day of tour they're working on here
(11) and they have all the emails
(12) facebook page links
(13) bandcamp links
(14) and perhaps even history of our activity in the region
(15) successes/ failures."
 
Overall class structures:
  -Tour Date class
  -Data Center class
  -State class 
  -City class
  -Contacts class
  	>Bands class
  	>Bookers class
  -Venues class

All classes will have a "store" and "pull" function to add or view data from Google Sheets.

Two primary objectives exist for the overall program functionality:
	1) A calendar which has associated tour date information, city information, etc.
	2) A database from which to draw upon and build said calendar
Think two buttons - one to manipulate the calendar on top, another on the bottom to manipulate the database - on the
main menu.  Those lead to their respective main pages.  

Calendar contains:
	-A literal calendar (top left), days selectable, which opens the data for the day
	-The data for the selected day (initiated blank until day selected) (bottom left)
	-A map (Google maps?) showing the location for the day (full right), including a potential route if the day
	contains multiple locations, and a route from your current location (potentially show sleep spots?)
	-"Add/remove new city to/from date" button (below data selected for day, venues optional, shows all contacts)

Database contains:
	-A hyperlink to the Google spreadsheet interfacing with the data (and ability to c+p sheet link) (top)
		>Days, states, cities, contacts all have their own sheets within full speadsheet itself
	-Dropdown list to select each individual state (below hyperlink)
	-Dropdown list to select each city within that state (plus new/delete city button) (below state)
	-Venue dropdown list with associated city (plus new/delete venue button) (below city, left side)
	-Venue information (below dropdown)
	-Contacts dropdown within city (plus new/delete contact buttons) (below city, right side, filtered for venue)
	-Contact information (below dropdown)




CHANGELOG:
3/19/2018:
  -Changed from Java to Python
  -Shifted software structure to more greatly-defined object oriented design
  -Created class structures outline
  -Noted intent of "store" and "pull" methods
  -Basic class attributes mentioned in objectives

3/20/2018
  -Added signature, documentation, and commentary to all active modules
  -Added datacenter.py as a general management object to handle all active objects and act as the link to Google
  -Added database-like qualities to state.py, city.py, venue.py, and datacenter.py
  -Added searching functionality to state and city objects - will add to venue ibn near future
	>As an aside, the select functions act similarly to data pointers
  -Created test cases and test data population for main.py - was able to access all data as intended thus far

3/21/2018
  -Created written wireframe of app and GUI design
  -Created outline of Google Sheet structure
  -Added dayinfo.py, allowing for individual days on the calendar to contain and manipulate location and
  performance info
  	>Adding states, cities, locations, etc. require only the names now instead of a full class
	>Ideally, this will make future development easier, especially when it comes to creating GUI dropdown menus
  -Added additional test cases to main.py

3/22/2018
  -Created the contact class to help manage individuals in addition to locations and dates
  -Created band class to contain multiple contacts
	>All roles able to be defined, multiple roles can be defined per contact, as well as per band
  -Expanded modules (particular venue.py) to accommodate the inclusion of contacts
  -Added more commentary and documentation

3/23/2018  (UPDATED TO InDev 0.0.3)
  -Name of software chosen: "Waves In Motion"
  -Shifted test functions in main.py to a new file in the root directory of the repository, test.py
  -Added Kivy framework to app for GUI
  -Drew physical wireframe for the app
  -Created basic GUI for the main menu

3/24/2018
  -Added database and calendar pages to WavesInMotion App, in addition to screen-swapping functionality
  -Archived the app's primary .kv file and replaced it with Builder.load_string function

3/26/2018
  -Created Calendar screen coded wireframe
  -Added MapView, need to create own calendar widget for this specific purpose
  -Tried several calendar and datepicker widgets, all had bugs

3/27/2018
  -Added datetime module to main.py
  -Created functioning calendar data management class - GUI to come tomorrow
	>Contains incrementMonth and decrementMonth functions
	>Plan on creating 6 rows of horizontal listviews with listviewadapters to allow dates to be selected
		+Should mesh well with the DayInfo box to come after

3/28/2018
  -Modified calendar substantially - now a RelativeLayout with nested custom widgets, and the actual days are
  defined using a recycled grid layout
  -Added substantial functionality to calendar UI

3/29/2018  (UPDATED TO InDev 0.0.4)
  -Rewrote the Calendar View to add complete functionality (woo!)
  -Rewrote the kv to convert much of the hard-coded widgets to dynamic python-based widgets
