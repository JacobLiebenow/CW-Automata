This is a document designed to do two things: 
  1) Serve as a schedule/roadmap of sorts for the app.
  2) Handle day-to-day documentation and tasks accomplished, keeping track of what was done and when it was done.
  
Objectives:
"(1) each day has its own page
(2) each state listed seperately
(3) broken down by city
(4) listing all venues-per-city
(5) bands-per-city
(6) promoters/bookers-per-city
(7) it becomes a consolidated reference guide
(8) with data from the DB's
(9) the new viral data
(10) and essentially one just needs to glance the day of tour they're working on here
(11) and they have all the emails
(12) facebook page links
(13) bandcamp links
(14) and perhaps even history of our activity in the region
(15) successes/ failures.

ADDENDUM:
Create copy-pastable version for tour date info to pull from google sheets"
 
Overall class structures:
  -Tour Date class
  -Data Center class
  -State class 
  -City class
  -Contacts class
  	>Bands class
  	>Bookers class
  -Venues class

All classes will have a "store" and "pull" function to add or view data from Google Sheets.

Two primary objectives exist for the overall program functionality:
	1) A calendar which has associated tour date information, city information, etc.
	2) A database from which to draw upon and build said calendar
Think two buttons - one to manipulate the calendar on top, another on the bottom to manipulate the database - on the
main menu.  Those lead to their respective main pages.  

Calendar contains:
	-A literal calendar (top left), days selectable, which opens the data for the day
	-The data for the selected day (initiated blank until day selected) (bottom left)
	-A map (Google maps?) showing the location for the day (full right), including a potential route if the day
	contains multiple locations, and a route from your current location (potentially show sleep spots?)
	-"Add/remove new city to/from date" button (below data selected for day, venues optional, shows all contacts)

Database contains:
	-A hyperlink to the Google spreadsheet interfacing with the data (and ability to c+p sheet link) (top)
		>Days, states, cities, contacts all have their own sheets within full speadsheet itself
	-Dropdown list to select each individual state (below hyperlink)
	-Dropdown list to select each city within that state (plus new/delete city button) (below state)
	-Venue dropdown list with associated city (plus new/delete venue button) (below city, left side)
	-Venue information (below dropdown)
	-Contacts dropdown within city (plus new/delete contact buttons) (below city, right side, filtered for venue)
	-Contact information (below dropdown)




CHANGELOG:
3/19/2018:
  -Changed from Java to Python
  -Shifted software structure to more greatly-defined object oriented design
  -Created class structures outline
  -Noted intent of "store" and "pull" methods
  -Basic class attributes mentioned in objectives

3/20/2018
  -Added signature, documentation, and commentary to all active modules
  -Added datacenter.py as a general management object to handle all active objects and act as the link to Google
  -Added database-like qualities to state.py, city.py, venue.py, and datacenter.py
  -Added searching functionality to state and city objects - will add to venue ibn near future
	>As an aside, the select functions act similarly to data pointers
  -Created test cases and test data population for main.py - was able to access all data as intended thus far

3/21/2018
  -Created written wireframe of app and GUI design
  -Created outline of Google Sheet structure
  -Added dayinfo.py, allowing for individual days on the calendar to contain and manipulate location and
  performance info
  	>Adding states, cities, locations, etc. require only the names now instead of a full class
	>Ideally, this will make future development easier, especially when it comes to creating GUI dropdown menus
  -Added additional test cases to main.py

3/22/2018
  -Created the contact class to help manage individuals in addition to locations and dates
  -Created band class to contain multiple contacts
	>All roles able to be defined, multiple roles can be defined per contact, as well as per band
  -Expanded modules (particular venue.py) to accommodate the inclusion of contacts
  -Added more commentary and documentation

3/23/2018  (UPDATED TO InDev 0.0.3)
  -Name of software chosen: "Waves In Motion"
  -Shifted test functions in main.py to a new file in the root directory of the repository, test.py
  -Added Kivy framework to app for GUI
  -Drew physical wireframe for the app
  -Created basic GUI for the main menu

3/24/2018
  -Added database and calendar pages to WavesInMotion App, in addition to screen-swapping functionality
  -Archived the app's primary .kv file and replaced it with Builder.load_string function

3/26/2018
  -Created Calendar screen coded wireframe
  -Added MapView, need to create own calendar widget for this specific purpose
  -Tried several calendar and datepicker widgets, all had bugs

3/27/2018
  -Added datetime module to main.py
  -Created functioning calendar data management class - GUI to come tomorrow
	>Contains incrementMonth and decrementMonth functions
	>Plan on creating 6 rows of horizontal listviews with listviewadapters to allow dates to be selected
		+Should mesh well with the DayInfo box to come after

3/28/2018
  -Modified calendar substantially - now a RelativeLayout with nested custom widgets, and the actual days are
  defined using a recycled grid layout
  -Added substantial functionality to calendar UI

3/29/2018  (UPDATED TO InDev 0.0.4)
  -Rewrote the Calendar View to add complete functionality (woo!)
  -Rewrote the kv to convert much of the hard-coded widgets to dynamic python-based widgets

3/30/2018
  -Fixed edge case bugs with Calendar View
  -Added date selection functionality
  -Replaced kv for database link management with python equivalent
  -Added functionality to pass link to Google Sheets to datacenter object via database link management view in GUI
	>It's finally time to add the ability to link to Google via the submit buttons!
  -Cleaned up code and removed deprecated commented functions and classes in main.py
  -Added the need for a link to be initialized with datacenter object

4/2/2018
  -Credentials can officially be obtained from google via submitting a database link
	>Provides the ability to read and write specifically to and from spreadsheets
  -Created written data structure for Google Sheets 
	>This could still use some tinkering

4/3/2018  (UPDATED TO InFDev 0.0.5)
  -Link to spreadsheet is now put through a validation process, and the ID is parsed
  -Redesigned Database Manager page (drawn by hand)
  -Added view for overall Database Manager page structure (python)
  -Added coded wireframe of Database Manager within view

4/4/2018
  -Added final UI widget choices to Database Manager page (spinners, radio buttons, etc.)
  -Created popups to add info to google sheets
  -Added error catching for Database Manager page

4/5/2018 (UPDATED TO InFDev 0.0.6)
  -Added batch submission info and HTTP requests for adding data to Google Sheets
	>New Venue/Individual/Organization buttons fully operational
  -Reorganized layout for data entry popups
  -Heavily edited datacenter.py to allow for new batch requests
  -Added more error catching to datacenter.py and main.py

4/6/2018
  -Data can now be pulled from Google Sheets and read in addition to being written directly to sheets
	>Info added to the database is now automatically sorted, as well, in alphabetial order
  -Data is now populated within the datacenter on connection call
	>A list of state names within datacenter is now maintained in order to ease in the state selection function
	>Likewise, a similar array was added to state.py as well as city.py
  -Edited data storage classes to mesh with new data call protocols via Google Sheets
	>Need to populate data on clicking one of the spinners to sort by state, city, venue, etc.

4/9/2018
  -Spinners on Database Manager page now accurate list and update states, cities, venues, and contacts alike
  -Added email field to new venue and new contact popups, and updated all classes to reflect that
  -Set up infrastructure to edit and remove rows from sheets
	>Added functionality to remove venues successfully
  -City now allows for storage of contacts and organizations (think: home city)
	>(DEV NOTE: Add search functionality?)
  -Changed name of band.py to organization.py

4/10/2018 (UPDATED TO InFDev 0.0.7)
  -Remove functions now online for contacts and organizations
  -All data in google sheets now represented in venue, contact, and organization objects
  -Edit functions now online for venues, contacts, and organizations
  -Added refresh buttons for info boxes
  -Replaced info box buttons with actual info boxes
	>Refresh buttons now refresh all data in boxes on press according to selected location/contact

4/11/2018
  -Changed MapView to python-based as opposed to kv-based to allow for dynamic updating
  -Reworked DayInfo points of data stored
  -Added new/edit, remove, and expand day buttons to calendar view
  -Added "Add" and "Remove" date functions to datacenter to create or delete sheets on Google Spreadsheet
  based off date name.
  -Updated venues to contain state name and city name, so each venue object is a fully-contained, usable address
